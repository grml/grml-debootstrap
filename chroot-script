#!/bin/sh
# Filename:      /etc/debootstrap/chroot-script
# Purpose:       script executed in chroot when installing Debian via grml-debootstrap
# Authors:       grml-team (grml.org), (c) Michael Prokop <mika@grml.org>
# Bug-Reports:   see http://grml.org/bugs/
# License:       This file is licensed under the GPL v2.
################################################################################
# GRML_CHROOT_SCRIPT_MARKER - do not remove this line unless you want to keep
# this script as /bin/chroot-script on your new installed system
################################################################################

. /etc/debootstrap/config    || exit 1
. /etc/debootstrap/variables || exit 1

[ -r /proc/1 ] || mount -t proc none /proc

# variable checks {{{

# use aptitude only if it's available
if [ -x /usr/bin/aptitude ] ; then
   APTUPDATE="aptitude update $DPKG_OPTIONS"
   # Debian ISOs do not contain signed Release files
   if [ -n "$ISO" ] ; then
      APTINSTALL="aptitude -y --allow-untrusted --without-recommends install $DPKG_OPTIONS"
      APTUPGRADE="aptitude -y --allow-untrusted safe-upgrade $DPKG_OPTIONS"
   else
      APTINSTALL="aptitude -y --without-recommends install $DPKG_OPTIONS"
      APTUPGRADE="aptitude -y safe-upgrade $DPKG_OPTIONS"
   fi
else
   APTINSTALL="apt-get --force-yes -y --no-install-recommends install $DPKG_OPTIONS"
   APTUPDATE="apt-get update $DPKG_OPTIONS"
   APTUPGRADE="apt-get --force-yes -y upgrade $DPKG_OPTIONS"
fi

if [ -z "$STAGES" ] ; then
   STAGES='/etc/debootstrap/stages'
   [ -d "$STAGES" ] || mkdir -p "$STAGES"
fi
# }}}

# helper functions {{{
stage() {
  if [ -n "$2" ] ; then
     echo "$2" > "$STAGES/$1"
     return 0
  elif grep -q done "$STAGES/$1" 2>/dev/null ; then
     echo "   [*] Notice: stage $1 has been executed already, skipping execution therefore.">&2
     return 1
  fi
  echo "   Executing stage ${1}"
  return 0
}

askpass() {
  # read -s emulation for dash. result is in $resp.
  set -o noglob
  [ -t 0 ] && stty -echo
  read resp
  [ -t 0 ] && stty echo
  set +o noglob
}
# }}}

# define chroot mirror {{{
chrootmirror() {
  if [ -n "$KEEP_SRC_LIST" ] ; then
    echo "KEEP_SRC_LIST has been set, skipping chrootmirror stage."
    return
  fi

  if [ -z "$COMPONENTS" ] ; then
    COMPONENTS='main contrib non-free'
  fi
  echo "Using repository components $COMPONENTS"

  if [ -n "$ISO" ] ; then
    echo "Adjusting sources.list for ISO (${ISO})."
    echo "deb $ISO $RELEASE $COMPONENTS" > /etc/apt/sources.list
    echo "Adding mirror entry (${MIRROR}) to sources.list."
    [ -n "$MIRROR" ] && echo "deb $MIRROR $RELEASE $COMPONENTS" >> /etc/apt/sources.list || true
  else
    if [ -n "$MIRROR" ] ; then
      echo "Adjusting sources.list for mirror (${MIRROR})."
      echo "deb $MIRROR $RELEASE $COMPONENTS" > /etc/apt/sources.list
    fi
  fi

  # add security.debian.org:
  case "$RELEASE" in
    unstable|sid) ;;  # no security pool available
    *)
      echo "Adding security.debian.org to sources.list."
      echo "deb http://security.debian.org ${RELEASE}/updates $COMPONENTS" >> /etc/apt/sources.list
      ;;
  esac
}
# }}}

# remove local chroot mirror {{{
remove_chrootmirror() {
  if [ -n "$KEEP_SRC_LIST" ] ; then
    echo "KEEP_SRC_LIST has been set, skipping remove_chrootmirror stage."
    return
  fi

  if [ -n "$ISO" ] ; then
    echo "Removing ISO (${ISO}) from sources.list."
    TMP_ISO=$(echo "$ISO" |sed 's#/#\\/#g')
    sed -i "/deb $TMP_ISO $RELEASE $COMPONENTS/ D" /etc/apt/sources.list
  else
    if [ -n "$MIRROR" -a -n "$(echo $MIRROR|grep file:)" ] ; then
      echo "Removing local mirror (${MIRROR}) from sources.list."
      TMP_MIRROR=$(echo "$MIRROR" |sed 's#/#\\/#g')
      sed -i "/deb $TMP_MIRROR $RELEASE $COMPONENTS/ D" /etc/apt/sources.list
      echo "Adding fallback mirror entry (${FALLBACK_MIRROR}) to sources.list instead."
      echo "deb $FALLBACK_MIRROR $RELEASE $COMPONENTS" >> /etc/apt/sources.list
    fi
  fi
}
# }}}

# set up grml repository {{{
grmlrepos() {
  if [ -n "$GRMLREPOS" ] ; then
     # user might have provided their own apt sources.list
     if ! grep -q grml /etc/apt/sources.list.d/grml.list 2>/dev/null ; then
        cat >> /etc/apt/sources.list.d/grml.list << EOF
# grml: stable repository:
  deb     http://deb.grml.org/ grml-stable  main
  deb-src http://deb.grml.org/ grml-stable  main

# grml: testing/development repository:
  deb     http://deb.grml.org/ grml-testing main
  deb-src http://deb.grml.org/ grml-testing main
EOF
     fi

     if apt-get update $DPKG_OPTIONS; then
       apt-get -y --allow-unauthenticated install grml-debian-keyring $DPKG_OPTIONS
       apt-get update $DPKG_OPTIONS
     else
       # make sure we have the keys available for aptitude
       gpg --keyserver subkeys.pgp.net --recv-keys F61E2E7CECDEA787
       gpg --export F61E2E7CECDEA787 | apt-key add - || true # not yet sure
       # why it's necessary, sometimes we get an error even though it works [mika]
     fi

     # make sure we install packages from Grml's pool only if not available
     # from Debian!
     if ! grep -q grml /etc/apt/preferences 2>/dev/null ; then
        cat >> /etc/apt/preferences << EOF
// debian pool (default):
Package: *
Pin: release o=Debian
Pin-Priority: 996

// main grml-repository:
Package: *
Pin: origin deb.grml.org
Pin-Priority: 991
EOF
     fi
  fi
}
# }}}

# check available backports release version {{{
checkbackports() {
  wget -q -O/dev/null http://backports.debian.org/debian-backports/dists/${1}-backports/Release
}
# }}}

# feature to provide Debian backports repos {{{
backportrepos() {
    if [ -n "$BACKPORTREPOS" ] ; then
        if ! checkbackports $RELEASE ; then
            echo "Backports for ${RELEASE} are not available." >&2
            exit 1
        else
            # user might have provided their own apt sources.list
            if ! grep -q backports /etc/apt/sources.list.d/backports.list 2>/dev/null ; then
                cat >> /etc/apt/sources.list.d/backports.list << EOF
# debian backports: ${RELEASE}-backports repository:
deb     http://backports.debian.org/debian-backports ${RELEASE}-backports main
deb-src http://backports.debian.org/debian-backports ${RELEASE}-backports main
EOF
            fi
        fi
    fi
}
# }}}

# set up kernel-img.conf {{{
kernelimg_conf() {
  if ! [ -r /etc/kernel-img.conf ] ; then
     echo "Setting up /etc/kernel-img.conf"
     cat > /etc/kernel-img.conf << EOF
# Kernel Image management overrides
# See kernel-img.conf(5) for details
do_initrd = Yes
do_symlinks = Yes
EOF
  fi
}
# }}}

# make sure services do not start up {{{
install_policy_rcd() {
  if ! [ -r /usr/sbin/policy-rc.d ] ; then
     export POLICYRCD=1
     cat > /usr/sbin/policy-rc.d << EOF
#!/bin/sh
exit 101
EOF
     chmod 775 /usr/sbin/policy-rc.d
  fi
}
# }}}

# make sure we have an up2date system {{{
upgrade_system() {
  if [ "$UPGRADE_SYSTEM" = "yes" ] ; then
    echo "Running update + upgrade"
    $APTUPDATE
    $APTUPGRADE
  else
    echo "Not running update + upgrade as \$UPDATE_AND_UPGRADE is not set to 'yes'."
  fi
}

# }}}
# remove now useless apt cache {{{
remove_apt_cache() {
  if [ "$RM_APTCACHE" = 'yes' ] ; then
    echo "Cleaning apt cache."
    apt-get clean $DPKG_OPTIONS
  else
    echo "Not cleaning apt cache as \$RM_APTCACHE is unset."
  fi
}
# }}}

# install additional packages {{{
packages() {
  # Pre-seed the debconf database with answers. Each question will be marked
  # as seen to prevent debconf from asking the question interactively.
  [ -f /etc/debootstrap/debconf-selections ] && {
    echo "Preseeding the debconf database, some lines might be skipped..."
    cat /etc/debootstrap/debconf-selections | debconf-set-selections
  }

  if [ "$PACKAGES" = 'yes' ] ; then
     if ! [ -r /etc/debootstrap/packages ] ; then
       echo "Error: /etc/debootstrap/packages (inside chroot) not found, exiting." >&2
       exit 1
     else
       $APTUPDATE
       DEBIAN_FRONTEND=$DEBIAN_FRONTEND $APTINSTALL $(grep -v '^#' /etc/debootstrap/packages) $GRMLPACKAGES
     fi
  fi
}
# }}}

# install extra packages {{{
extrapackages() {
    if [ "$EXTRAPACKAGES" = 'yes' ] ; then
        PACKAGELIST=$(find /etc/debootstrap/extrapackages -type f -name '*.deb')
        if [ -n "$PACKAGELIST" ]; then
            dpkg -i $PACKAGELIST
            # run apt again to resolve any deps
            DEBIAN_FRONTEND=$DEBIAN_FRONTEND $APTINSTALL
        fi
    fi
}
# }}}

# check if the specified Debian package exists
package_exists() {
  output=$(apt-cache show "$1" 2>/dev/null)
  [ -n "$output" ]
  return $?
}


# determine the kernel version postfix
get_kernel_version() {
  # do not override $KERNEL if set via config file
  if [ -n "$KERNEL" ] ; then
    echo "$KERNEL"
    return 0
  fi

  case $ARCH in
    i386)   KARCH=686   ;;
    amd64)  KARCH=amd64 ;;
    *)
      echo "Only i386 and amd64 are currently supported" >&2
      return 1
  esac

  for KPREFIX in "" "2.6-" ; do  # iterate through the kernel prefixes,
                                 # currently "" and "2.6-"
    if package_exists linux-image-${KPREFIX}${KARCH} ; then
      echo ${KPREFIX}${KARCH}
      return 0
    fi

  done
}

# install kernel packages {{{
kernel() {
  $APTUPDATE
  KVER=$(get_kernel_version)
  if [ -n "$KVER" ] ; then
     # note: install busybox to be able to debug initramfs
     KERNELPACKAGES="linux-image-$KVER linux-headers-$KVER busybox firmware-linux-free firmware-linux"
     DEBIAN_FRONTEND=$DEBIAN_FRONTEND $APTINSTALL $KERNELPACKAGES
  else
     echo "Warning: Could not find a kernel for your system. Your system won't be able to boot itself!"
  fi
}
# }}}

# reconfigure packages {{{
reconfigure() {
  if [ -n "$RECONFIGURE" ] ; then
     for package in $RECONFIGURE ; do
         if dpkg --list $package >/dev/null 2>&1 | grep -q '^ii' ; then
           DEBIAN_FRONTEND=$DEBIAN_FRONTEND dpkg-reconfigure $package || \
           echo "Warning: $package does not exist, can not reconfigure it."
         fi
     done
  fi
}
# }}}

# set password of user root {{{
passwords()
{
  if [ -n "$NOPASSWORD" ] ; then
    echo "Skip setting root password as requested."
    return 0
  fi

  echo "Activating shadow passwords."
  shadowconfig on

  CHPASSWD_OPTION=
  if chpasswd --help 2>&1 | grep -q -- '-m,' ; then
     CHPASSWD_OPTION='-m'
  fi

  if [ -n "$ROOTPASSWORD" ] ; then
     echo root:"$ROOTPASSWORD" | chpasswd $CHPASSWD_OPTION
     export ROOTPASSWORD=''
  else
    a='1'
    b='2'
     echo "Setting password for user root:"
     while [ "$a" != "$b" ] ; do
       echo -n "Enter new UNIX password for user root: "
       askpass
       a="$resp"
       unset resp
       echo
       echo -n "Retype new UNIX password for user root: "
       askpass
       b="$resp"
       unset resp
       echo
       if [ "$a" != "$b" ] ; then
         echo "Sorry, passwords do not match. Retry."
         a='1'
         b='2'
       else
         echo root:"$a" | chpasswd $CHPASSWD_OPTION
         unset a
         unset b
       fi
     done
  fi
}
# }}}

# set up /etc/hosts {{{
hosts() {
  if [ -f /etc/hosts ] ; then
     sed -i "s#127.0.0.1 .*#127.0.0.1       localhost  $HOSTNAME#" /etc/hosts
     [ -n "$HOSTNAME" ] && sed -i "s/grml/$HOSTNAME/g" /etc/hosts
  else
     cat > /etc/hosts << EOF
127.0.0.1       localhost $HOSTNAME

#127.0.0.1       localhost
#127.0.1.1       $HOSTNAME.example.org $HOSTNAME

# The following lines are desirable for IPv6 capable hosts
#::1     ip6-localhost ip6-loopback $HOSTNAME
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
ff02::3 ip6-allhosts
EOF
  fi
}
# }}}

# set up /etc/network/interfaces {{{
interfaces() {
  if ! [ -r /etc/network/interfaces ] || ! grep -q "auto lo" /etc/network/interfaces ; then
     echo "Setting up /etc/network/interfaces"
     cat >> /etc/network/interfaces << EOF

# loopback device:
iface lo inet loopback
auto lo

# eth0:
# iface eth0 inet dhcp
# auto eth0

EOF
  fi
}
# }}}

# set default locales {{{
default_locales() {
  if [ -n "$DEFAULT_LOCALES" ] ; then
    if ! [ -x /usr/sbin/update-locale ] ; then
      echo "Warning: update-locale executable not available (no locales package installed?)"
      echo "Ignoring request to run update-locale for $DEFAULT_LOCALES therefore"
      return 0
    fi

    /usr/sbin/update-locale LANG="$DEFAULT_LOCALES"
  fi
}
# }}}

# adjust timezone {{{
timezone() {
  if [ -n "$TIMEZONE" ] ; then
     echo "Adjusting /etc/localtime"
     ln -sf /usr/share/zoneinfo/$TIMEZONE /etc/localtime
  fi
}
# }}}

# helper function for fstab() {{{
createfstab(){
     echo "Setting up /etc/fstab"
if [ -n "$TARGET_UUID" ] ; then
   echo "/dev/disk/by-uuid/${TARGET_UUID} /  auto    defaults,errors=remount-ro 0   1" > /etc/fstab
else
   echo "${TARGET} /  auto    defaults,errors=remount-ro 0   1" > /etc/fstab
fi

cat >> /etc/fstab << EOF
proc           /proc        proc    defaults                      0   0
/dev/cdrom     /mnt/cdrom0  iso9660 ro,user,noauto                0   0
# some other examples:
# /dev/sda2       none         swap    sw,pri=0             0   0
# /dev/hda1       /Grml        ext3    dev,suid,user,noauto 0  2
# //1.2.3.4/pub   /smb/pub     smbfs   defaults,user,noauto,uid=grml,gid=grml 0 0
# linux:/pub      /beer        nfs     defaults             0  0
# tmpfs           /tmp         tmpfs   size=300M            0  0
# /dev/sda5       none         swap    sw                   0  0
EOF
}
# }}}

# generate /etc/fstab {{{
fstab() {
  # set up /etc/fstab if file is not present (cdebootstrap)
  if [ ! -f /etc/fstab  ] ; then
     createfstab
  fi

  # set up /etc/fstab if file is UNCONFIGURED (debootstrap)
  if grep -q UNCONFIGURED /etc/fstab ; then
     createfstab
  fi
}
# }}}

# set up hostname {{{
hostname() {
  if [ -n "$HOSTNAME" ] ; then
     echo "Setting hostname to ${HOSTNAME}."
     echo "$HOSTNAME" > /etc/hostname

     # adjust postfix configuration
     if [ -r /etc/postfix/main.cf ] ; then
        # adjust hostname related options:
        sed -i "s/grml/$HOSTNAME/g" /etc/postfix/main.cf

        # listen on loopback interface only:
        sed -i "s/^inet_interfaces = .*/inet_interfaces = loopback-only/" /etc/postfix/main.cf
        grep -q inet_interfaces /etc/postfix/main.cf || echo 'inet_interfaces = loopback-only' >> /etc/postfix/main.cf
     fi
  fi
}
# }}}

# generate initrd/initramfs {{{
initrd() {
  # assume the first available kernel as our main kernel
  KERNELIMG=$(ls -1 /boot/vmlinuz-* 2>/dev/null | head -1)
  if [ -z "$KERNELIMG" ] ; then
     echo 'No kernel image found, skipping initrd stuff.'>&2
     return
  fi

  KERNELVER=${KERNELIMG#/boot/vmlinuz-}

  # generate initrd
  if [ -n "$INITRD" ] ; then
     echo "Generating initrd."
     update-initramfs -c -t -k $KERNELVER
  fi
}
# }}}

# grub configuration/installation {{{
grub_install() {

  if [ -z "$GRUB" ] ; then
    echo "Notice: \$GRUB not defined, will not install grub inside chroot at this stage."
    return 0
  fi

  if ! dpkg --list grub-pc 2>/dev/null | grep -q '^ii' ; then
    echo "Notice: grub option set but no grub-pc package, installing it therefore."
    DEBIAN_FRONTEND=$DEBIAN_FRONTEND $APTINSTALL grub-pc
  fi

  if ! [ -x "$(which grub-install)" ] ; then
     echo "Error: grub-install not available. (Error while installing grub package?)" >&2
     return 1
  fi

  if [ -n "$SELECTED_PARTITIONS" ] ; then # using sw-raid
     for device in $SELECTED_PARTITIONS ; do
        GRUB="${device%%[0-9]}"
        echo "Installing grub on ${GRUB}:"
        grub-install --no-floppy "$GRUB"
     done
  else
     echo "Installing grub on ${GRUB}:"
     grub-install --no-floppy "$GRUB"
  fi

  echo "Adjusting grub configuration for use on ${GRUB}."

  # finally install grub
  if [ -x /usr/sbin/update-grub ] ; then
     UPDATEGRUB='/usr/sbin/update-grub'
  elif [ -x /sbin/update-grub ] ; then
     UPDATEGRUB='/sbin/update-grub'
  else
    echo "Error: update-grub not available, can not execute it." >&2
    return 1
  fi

  $UPDATEGRUB
}
# }}}

# execute all scripts present in /etc/debootstrap/chroot-scripts/ {{{
custom_scripts() {
  [ -d /etc/debootstrap/chroot-scripts/ ] || return 0

  for script in /etc/debootstrap/chroot-scripts/* ; do
      echo "Executing script $script"
      $script && echo "done" || echo "failed"
  done
}
# }}}

# make sure we don't have any running processes left {{{
services() {
  for service in ssh mdadm mdadm-raid ; do
    if [ -x /etc/init.d/"$service" ] ; then
       /etc/init.d/"$service" stop || true
    fi
  done
}
# }}}

# unmount /proc and make sure nothing is left {{{
finalize() {
  # make sure we don't leave any sensible data
  rm -f /etc/debootstrap/variables

  [ -n "$POLICYRCD" ] && rm -f /usr/sbin/policy-rc.d

  umount /proc >/dev/null 2>/dev/null || true
}
# }}}

# signal handler {{{
signal_handler() {
  finalize
  [ -n "$1" ] && EXIT="$1" || EXIT="1"
  exit "$EXIT"
}
# }}}

# set signal handler {{{
trap signal_handler HUP INT QUIT TERM
# }}}

# execute the functions {{{

 # always execute install_policy_rcd
 install_policy_rcd

 for i in chrootmirror grmlrepos backportrepos kernelimg_conf \
     kernel packages extrapackages  reconfigure hosts interfaces \
     default_locales timezone fstab hostname initrd grub_install passwords \
     custom_scripts upgrade_system remove_apt_cache services \
     remove_chrootmirror; do
     if stage $i ; then
       $i && stage $i done || exit 1
     fi
  done
  # always execute the finalize stage:
  finalize
# }}}

# finally exit the chroot {{{
  echo "Finished chroot installation, exiting."
  exit 0
# }}}

## END OF FILE #################################################################
# vim: ai tw=80 expandtab foldmethod=marker
